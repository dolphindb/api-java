package com.xxdb.data;

import com.alibaba.fastjson2.JSONObject;
import com.xxdb.DBConnection;
import junit.framework.Assert;
import org.junit.Test;

import java.util.Arrays;
import java.util.ResourceBundle;

import static org.junit.Assert.*;

public class BasicTensorTest {
    static ResourceBundle bundle = ResourceBundle.getBundle("com/xxdb/setup/settings");
    static String HOST = bundle.getString("HOST");
    static int PORT = Integer.parseInt(bundle.getString("PORT"));

    @Test
    public void test_BasicTensor() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(100)");
        Assert.assertEquals("tensor<int[1]>([100])", bc.getString());
    }
    @Test
    public void test_BasicTensor_getDataCategory() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(100)");
        Assert.assertEquals("INTEGRAL", bc.getDataCategory().toString());
    }

    @Test
    public void test_BasicTensor_getDataType() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(100)");
        Assert.assertEquals("DT_INT", bc.getDataType().toString());
    }
    @Test
    public void test_BasicTensor_rows() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(100)");
        Assert.assertEquals(1, bc.rows());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_bool_1=rand([true,false,00b],10);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],4);\n tmp_bool_5=take([tmp_bool_4],5);\n tmp_bool_6=take([tmp_bool_5],6);\n tmp_bool_7=take([tmp_bool_6],7);\n tmp_bool_8=take([tmp_bool_7],8);\n tmp_bool_9=take([tmp_bool_8],9);\n tmp_bool_10=take([tmp_bool_9],10);\n tr_bool_10=tensor(tmp_bool_10);\n tr_bool_10;");
        Assert.assertEquals(36288000, bc10.rows());
    }

    @Test
    public void test_BasicTensor_getDimensions() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(100)");
        Assert.assertEquals(1, bc.getDimensions());
        BasicTensor bc9 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],100);\n tmp_bool_2=take([tmp_bool_1],1);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],1);\n  tmp_bool_4=take([tmp_bool_3],1);\n tmp_bool_5=take([tmp_bool_4],1);\n tmp_bool_6=take([tmp_bool_5],1);\n tmp_bool_7=take([tmp_bool_6],1);\n tmp_bool_8=take([tmp_bool_7],1);\n tmp_bool_9=take([tmp_bool_8],1);\n tr_bool_9=tensor(tmp_bool_9);\n tr_bool_9;");
        Assert.assertEquals(9, bc9.getDimensions());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_bool_1=rand([true,false,00b],10);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],4);\n tmp_bool_5=take([tmp_bool_4],5);\n tmp_bool_6=take([tmp_bool_5],6);\n tmp_bool_7=take([tmp_bool_6],7);\n tmp_bool_8=take([tmp_bool_7],8);\n tmp_bool_9=take([tmp_bool_8],9);\n tmp_bool_10=take([tmp_bool_9],10);\n tr_bool_10=tensor(tmp_bool_10);\n tr_bool_10;");
        Assert.assertEquals(10, bc10.getDimensions());
    }

    @Test
    public void test_BasicTensor_getShapes() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(100)");
        Assert.assertEquals("[1]",  Arrays.toString(bc.getShapes()));
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_bool_1=rand([true,false,00b],10);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],4);\n tmp_bool_5=take([tmp_bool_4],5);\n tmp_bool_6=take([tmp_bool_5],6);\n tmp_bool_7=take([tmp_bool_6],7);\n tmp_bool_8=take([tmp_bool_7],8);\n tmp_bool_9=take([tmp_bool_8],9);\n tmp_bool_10=take([tmp_bool_9],10);\n tr_bool_10=tensor(tmp_bool_10);\n tr_bool_10;");
        Assert.assertEquals("[10, 9, 8, 7, 6, 5, 4, 3, 2, 10]", Arrays.toString(bc10.getShapes()));
    }

    @Test
    public void test_BasicTensor_getStrides() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(100)");
        Assert.assertEquals("[1]", Arrays.toString(bc.getStrides()));
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_bool_1=rand([true,false,00b],10);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],4);\n tmp_bool_5=take([tmp_bool_4],5);\n tmp_bool_6=take([tmp_bool_5],6);\n tmp_bool_7=take([tmp_bool_6],7);\n tmp_bool_8=take([tmp_bool_7],8);\n tmp_bool_9=take([tmp_bool_8],9);\n tmp_bool_10=take([tmp_bool_9],10);\n tr_bool_10=tensor(tmp_bool_10);\n tr_bool_10;");
        Assert.assertEquals("[3628800, 403200, 50400, 7200, 1200, 240, 60, 20, 10, 1]", Arrays.toString(bc10.getStrides()));
    }

    @Test
    public void test_BasicTensor_getElemCount() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(100)");
        Assert.assertEquals(1l, bc.getElemCount());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_bool_1=rand([true,false,00b],10);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],4);\n tmp_bool_5=take([tmp_bool_4],5);\n tmp_bool_6=take([tmp_bool_5],6);\n tmp_bool_7=take([tmp_bool_6],7);\n tmp_bool_8=take([tmp_bool_7],8);\n tmp_bool_9=take([tmp_bool_8],9);\n tmp_bool_10=take([tmp_bool_9],10);\n tr_bool_10=tensor(tmp_bool_10);\n tr_bool_10;");
        Assert.assertEquals(36288000, bc10.getElemCount());
    }

    @Test
    public void test_BasicTensor_getData() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(100)");
        Assert.assertEquals("[100]", bc.getData().getString());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],12);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],4);\n tmp_bool_5=take([tmp_bool_4],5);\n tmp_bool_6=take([tmp_bool_5],6);\n tmp_bool_7=take([tmp_bool_6],7);\ntr_bool_7=tensor(tmp_bool_7);\n tr_bool_7;");
        Assert.assertEquals("[true,false,,true,false,,true,false,,true,...]", bc10.getData().getString());
        System.out.println(bc10.getString());
    }

    @Test
    public void test_BasicTensor_getString_bool() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(array(BOOL))");
        Assert.assertEquals("tensor<bool[0]>([])", bc.getString());

        BasicTensor bc1 = (BasicTensor)conn.run("tensor(take([true,false,00b],12))");
        Assert.assertEquals("tensor<bool[12]>([true,false,,true,false,,true,false,,true,false...])", bc1.getString());
        BasicTensor bc2 = (BasicTensor)conn.run("tensor(take([take([true,false,00b],10)],2).setColumnarTuple!())");
        //tmp_bool_1=rand([true,false,00b],10); tmp_bool_2=take([tmp_bool_1],2); tmp_bool_2.setColumnarTuple!(); tr_bool_2=tensor(tmp_bool_2)
        Assert.assertEquals("tensor<bool[2][10]>([[true,false,,true,false,,true,false,,true],[true,false,,true,false,,true,false,,true]])", bc2.getString());

        BasicTensor bc3 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],12);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n tr_bool_3=tensor(tmp_bool_3);\n tr_bool_3;");
        Assert.assertEquals("tensor<bool[3][2][12]>([[[true,false,,true,false,,true,false,,true,false...],[true,false,,true,false,,true,false,,true,false...]],[[true,false,,true,false,,true,false,,true,false...],[true,false,,true,false,,true,false,,true,false...]],[[true,false,,true,false,,true,false,,true,false...],[true,false,,true,false,,true,false,,true,false...]]])", bc3.getString());
        BasicTensor bc4 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],4);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],2);\n tr_bool_4=tensor(tmp_bool_4);\n tr_bool_4;");
        Assert.assertEquals("tensor<bool[2][3][2][4]>([[[[true,false,,true],[true,false,,true]],[[true,false,,true],[true,false,,true]],[[true,false,,true],[true,false,,true]]],[[[true,false,,true],[true,false,,true]],[[true,false,,true],[true,false,,true]],[[true,false,,true],[true,false,,true]]]])", bc4.getString());
        BasicTensor bc5 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],3);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],4);\n tmp_bool_5=take([tmp_bool_4],2);\n tr_bool_5=tensor(tmp_bool_5);\n tr_bool_5;");
        Assert.assertEquals("tensor<bool[2][4][3][2][3]>([[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]])", bc5.getString());
        BasicTensor bc6 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],5);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],2);\n tmp_bool_5=take([tmp_bool_4],3);\n tmp_bool_6=take([tmp_bool_5],2);\n tr_bool_6=tensor(tmp_bool_6);\n tr_bool_6;");
        Assert.assertEquals("tensor<bool[2][3][2][3][2][5]>([[[[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]],[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]]],[[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]],[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]]],[[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]],[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]]]],[[[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]],[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]]],[[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]],[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]]],[[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]],[[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]],[[true,false,,true,false],[true,false,,true,false]]]]]])", bc6.getString());
        BasicTensor bc7 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],3);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],2);\n tmp_bool_5=take([tmp_bool_4],2);\n tmp_bool_6=take([tmp_bool_5],2);\n tmp_bool_7=take([tmp_bool_6],2);\n tr_bool_7=tensor(tmp_bool_7);\n tr_bool_7;");
        Assert.assertEquals("tensor<bool[2][2][2][2][3][2][3]>([[[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]],[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]]],[[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]],[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]]]])", bc7.getString());
        BasicTensor bc8 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],3);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],3);\n  tmp_bool_4=take([tmp_bool_3],2);\n tmp_bool_5=take([tmp_bool_4],3);\n tmp_bool_6=take([tmp_bool_5],2);\n tmp_bool_7=take([tmp_bool_6],3);\n tmp_bool_8=take([tmp_bool_7],2);\n tr_bool_8=tensor(tmp_bool_8);\n tr_bool_8;");
        Assert.assertEquals("tensor<bool[2][3][2][3][2][3][2][3]>([[[[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]],[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]]],[[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]],[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]]],[[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]],[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]]]],[[[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]],[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]]],[[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]],[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]]],[[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]],[[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]],[[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]],[[[true,false,],[true,false,]],[[true,false,],[true,false,]],[[true,false,],[true,false,]]]]]]]])", bc8.getString());
        BasicTensor bc9 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],100);\n tmp_bool_2=take([tmp_bool_1],1);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],1);\n  tmp_bool_4=take([tmp_bool_3],1);\n tmp_bool_5=take([tmp_bool_4],1);\n tmp_bool_6=take([tmp_bool_5],1);\n tmp_bool_7=take([tmp_bool_6],1);\n tmp_bool_8=take([tmp_bool_7],1);\n tmp_bool_9=take([tmp_bool_8],1);\n tr_bool_9=tensor(tmp_bool_9);\n tr_bool_9;");
        Assert.assertEquals("tensor<bool[1][1][1][1][1][1][1][1][100]>([[[[[[[[[true,false,,true,false,,true,false,,true,false...]]]]]]]]])", bc9.getString());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_bool_1=take([true,false,00b],2);\n tmp_bool_2=take([tmp_bool_1],2);\n tmp_bool_2.setColumnarTuple!();\n tmp_bool_3=take([tmp_bool_2],1);\n  tmp_bool_4=take([tmp_bool_3],1);\n tmp_bool_5=take([tmp_bool_4],1);\n tmp_bool_6=take([tmp_bool_5],1);\n tmp_bool_7=take([tmp_bool_6],1);\n tmp_bool_8=take([tmp_bool_7],1);\n tmp_bool_9=take([tmp_bool_8],1);\n tmp_bool_10=take([tmp_bool_9],20);\n tr_bool_10=tensor(tmp_bool_10);\n tr_bool_10;");
        Assert.assertEquals("tensor<bool[20][1][1][1][1][1][1][1][2][2]>([[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]],[[[[[[[[[true,false],[true,false]]]]]]]]]])", bc10.getString());
    }
    @Test
    public void test_BasicTensor_getString_CHAR() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(array(CHAR))");
        Assert.assertEquals("tensor<char[0]>([])", bc.getString());

        BasicTensor bc1 = (BasicTensor)conn.run("tensor(take([1c,0c,00c,127c,-127c],12))");
        Assert.assertEquals("tensor<char[12]>([1,0,,127,-127,1,0,,127,-127,1...])", bc1.getString());
        BasicTensor bc2 = (BasicTensor)conn.run("tensor(take([take([1c,0c,00c,127c,-127c],10)],2).setColumnarTuple!())");
        //tmp_char_1=rand([true,false,00b],10); tmp_char_2=take([tmp_char_1],2); tmp_char_2.setColumnarTuple!(); tr_char_2=tensor(tmp_char_2)
        Assert.assertEquals("tensor<char[2][10]>([[1,0,,127,-127,1,0,,127,-127],[1,0,,127,-127,1,0,,127,-127]])", bc2.getString());

        BasicTensor bc3 = (BasicTensor)conn.run("tmp_char_1=take([1c,0c,00c,127c,-127c],12);\n tmp_char_2=take([tmp_char_1],2);\n tmp_char_2.setColumnarTuple!();\n tmp_char_3=take([tmp_char_2],3);\n tr_char_3=tensor(tmp_char_3);\n tr_char_3;");
        Assert.assertEquals("tensor<char[3][2][12]>([[[1,0,,127,-127,1,0,,127,-127,1...],[1,0,,127,-127,1,0,,127,-127,1...]],[[1,0,,127,-127,1,0,,127,-127,1...],[1,0,,127,-127,1,0,,127,-127,1...]],[[1,0,,127,-127,1,0,,127,-127,1...],[1,0,,127,-127,1,0,,127,-127,1...]]])", bc3.getString());
        BasicTensor bc4 = (BasicTensor)conn.run("tmp_char_1=take([1c,0c,00c,127c,-127c],12);\n tmp_char_2=take([tmp_char_1],2);\n tmp_char_2.setColumnarTuple!();\n tmp_char_3=take([tmp_char_2],3);\n  tmp_char_4=take([tmp_char_3],2);\n tr_char_4=tensor(tmp_char_4);\n tr_char_4;");
        Assert.assertEquals("tensor<char[2][3][2][12]>([[[[1,0,,127,-127,1,0,,127,-127,1...],[1,0,,127,-127,1,0,,127,-127,1...]],[[1,0,,127,-127,1,0,,127,-127,1...],[1,0,,127,-127,1,0,,127,-127,1...]],[[1,0,,127,-127,1,0,,127,-127,1...],[1,0,,127,-127,1,0,,127,-127,1...]]],[[[1,0,,127,-127,1,0,,127,-127,1...],[1,0,,127,-127,1,0,,127,-127,1...]],[[1,0,,127,-127,1,0,,127,-127,1...],[1,0,,127,-127,1,0,,127,-127,1...]],[[1,0,,127,-127,1,0,,127,-127,1...],[1,0,,127,-127,1,0,,127,-127,1...]]]])", bc4.getString());
        BasicTensor bc5 = (BasicTensor)conn.run("tmp_char_1=take([1c,0c,00c,127c,-127c],5);\n tmp_char_2=take([tmp_char_1],2);\n tmp_char_2.setColumnarTuple!();\n tmp_char_3=take([tmp_char_2],3);\n  tmp_char_4=take([tmp_char_3],4);\n tmp_char_5=take([tmp_char_4],2);\n tr_char_5=tensor(tmp_char_5);\n tr_char_5;");
        Assert.assertEquals("tensor<char[2][4][3][2][5]>([[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]])", bc5.getString());
        BasicTensor bc6 = (BasicTensor)conn.run("tmp_char_1=take([1c,0c,00c,127c,-127c],5);\n tmp_char_2=take([tmp_char_1],2);\n tmp_char_2.setColumnarTuple!();\n tmp_char_3=take([tmp_char_2],3);\n  tmp_char_4=take([tmp_char_3],2);\n tmp_char_5=take([tmp_char_4],3);\n tmp_char_6=take([tmp_char_5],2);\n tr_char_6=tensor(tmp_char_6);\n tr_char_6;");
        Assert.assertEquals("tensor<char[2][3][2][3][2][5]>([[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]],[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]]])", bc6.getString());
        BasicTensor bc7 = (BasicTensor)conn.run("tmp_char_1=take([1c,0c,00c,127c,-127c],5);\n tmp_char_2=take([tmp_char_1],2);\n tmp_char_2.setColumnarTuple!();\n tmp_char_3=take([tmp_char_2],3);\n  tmp_char_4=take([tmp_char_3],2);\n tmp_char_5=take([tmp_char_4],2);\n tmp_char_6=take([tmp_char_5],2);\n tmp_char_7=take([tmp_char_6],2);\n tr_char_7=tensor(tmp_char_7);\n tr_char_7;");
        Assert.assertEquals("tensor<char[2][2][2][2][3][2][5]>([[[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]],[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]]],[[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]],[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]]]])", bc7.getString());
        BasicTensor bc8 = (BasicTensor)conn.run("tmp_char_1=take([1c,0c,00c,127c,-127c],5);\n tmp_char_2=take([tmp_char_1],2);\n tmp_char_2.setColumnarTuple!();\n tmp_char_3=take([tmp_char_2],3);\n  tmp_char_4=take([tmp_char_3],2);\n tmp_char_5=take([tmp_char_4],3);\n tmp_char_6=take([tmp_char_5],2);\n tmp_char_7=take([tmp_char_6],3);\n tmp_char_8=take([tmp_char_7],2);\n tr_char_8=tensor(tmp_char_8);\n tr_char_8;");
        Assert.assertEquals("tensor<char[2][3][2][3][2][3][2][5]>([[[[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]],[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]]],[[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]],[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]]],[[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]],[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]]]],[[[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]],[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]]],[[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]],[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]]],[[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]],[[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]],[[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]],[[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]],[[1,0,,127,-127],[1,0,,127,-127]]]]]]]])", bc8.getString());
        BasicTensor bc9 = (BasicTensor)conn.run("tmp_char_1=take([1c,0c,00c,127c,-127c],100);\n tmp_char_2=take([tmp_char_1],1);\n tmp_char_2.setColumnarTuple!();\n tmp_char_3=take([tmp_char_2],1);\n  tmp_char_4=take([tmp_char_3],1);\n tmp_char_5=take([tmp_char_4],1);\n tmp_char_6=take([tmp_char_5],1);\n tmp_char_7=take([tmp_char_6],1);\n tmp_char_8=take([tmp_char_7],1);\n tmp_char_9=take([tmp_char_8],1);\n tr_char_9=tensor(tmp_char_9);\n tr_char_9;");
        Assert.assertEquals("tensor<char[1][1][1][1][1][1][1][1][100]>([[[[[[[[[1,0,,127,-127,1,0,,127,-127,1...]]]]]]]]])", bc9.getString());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_char_1=take([1c,0c,00c,127c,-127c],5);\n tmp_char_2=take([tmp_char_1],2);\n tmp_char_2.setColumnarTuple!();\n tmp_char_3=take([tmp_char_2],1);\n  tmp_char_4=take([tmp_char_3],1);\n tmp_char_5=take([tmp_char_4],1);\n tmp_char_6=take([tmp_char_5],1);\n tmp_char_7=take([tmp_char_6],1);\n tmp_char_8=take([tmp_char_7],1);\n tmp_char_9=take([tmp_char_8],1);\n tmp_char_10=take([tmp_char_9],20);\n tr_char_10=tensor(tmp_char_10);\n tr_char_10;");
        Assert.assertEquals("tensor<char[20][1][1][1][1][1][1][1][2][5]>([[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]],[[[[[[[[[1,0,,127,-127],[1,0,,127,-127]]]]]]]]]])", bc10.getString());
    }

    @Test
    public void test_BasicTensor_getString_SHORT() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(array(SHORT))");
        Assert.assertEquals("tensor<short[0]>([])", bc.getString());

        BasicTensor bc1 = (BasicTensor)conn.run("tensor(take([1h,0h,00h,32767h,-32767h],12))");
        Assert.assertEquals("tensor<short[12]>([1,0,,32767,-32767,1,0,,32767,-32767,1...])", bc1.getString());
        BasicTensor bc2 = (BasicTensor)conn.run("tensor(take([take([1h,0h,00h,32767h,-32767h],10)],2).setColumnarTuple!())");
        //tmp_short_1=rand([true,false,00b],10); tmp_short_2=take([tmp_short_1],2); tmp_short_2.setColumnarTuple!(); tr_short_2=tensor(tmp_short_2)
        Assert.assertEquals("tensor<short[2][10]>([[1,0,,32767,-32767,1,0,,32767,-32767],[1,0,,32767,-32767,1,0,,32767,-32767]])", bc2.getString());

        BasicTensor bc3 = (BasicTensor)conn.run("tmp_short_1=take([1h,0h,00h,32767h,-32767h],12);\n tmp_short_2=take([tmp_short_1],2);\n tmp_short_2.setColumnarTuple!();\n tmp_short_3=take([tmp_short_2],3);\n tr_short_3=tensor(tmp_short_3);\n tr_short_3;");
        Assert.assertEquals("tensor<short[3][2][12]>([[[1,0,,32767,-32767,1,0,,32767,-32767,1...],[1,0,,32767,-32767,1,0,,32767,-32767,1...]],[[1,0,,32767,-32767,1,0,,32767,-32767,1...],[1,0,,32767,-32767,1,0,,32767,-32767,1...]],[[1,0,,32767,-32767,1,0,,32767,-32767,1...],[1,0,,32767,-32767,1,0,,32767,-32767,1...]]])", bc3.getString());
        BasicTensor bc4 = (BasicTensor)conn.run("tmp_short_1=take([1h,0h,00h,32767h,-32767h],12);\n tmp_short_2=take([tmp_short_1],2);\n tmp_short_2.setColumnarTuple!();\n tmp_short_3=take([tmp_short_2],3);\n  tmp_short_4=take([tmp_short_3],2);\n tr_short_4=tensor(tmp_short_4);\n tr_short_4;");
        Assert.assertEquals("tensor<short[2][3][2][12]>([[[[1,0,,32767,-32767,1,0,,32767,-32767,1...],[1,0,,32767,-32767,1,0,,32767,-32767,1...]],[[1,0,,32767,-32767,1,0,,32767,-32767,1...],[1,0,,32767,-32767,1,0,,32767,-32767,1...]],[[1,0,,32767,-32767,1,0,,32767,-32767,1...],[1,0,,32767,-32767,1,0,,32767,-32767,1...]]],[[[1,0,,32767,-32767,1,0,,32767,-32767,1...],[1,0,,32767,-32767,1,0,,32767,-32767,1...]],[[1,0,,32767,-32767,1,0,,32767,-32767,1...],[1,0,,32767,-32767,1,0,,32767,-32767,1...]],[[1,0,,32767,-32767,1,0,,32767,-32767,1...],[1,0,,32767,-32767,1,0,,32767,-32767,1...]]]])", bc4.getString());
        BasicTensor bc5 = (BasicTensor)conn.run("tmp_short_1=take([1h,0h,00h,32767h,-32767h],5);\n tmp_short_2=take([tmp_short_1],2);\n tmp_short_2.setColumnarTuple!();\n tmp_short_3=take([tmp_short_2],3);\n  tmp_short_4=take([tmp_short_3],4);\n tmp_short_5=take([tmp_short_4],2);\n tr_short_5=tensor(tmp_short_5);\n tr_short_5;");
        Assert.assertEquals("tensor<shortbc5.getString());
        BasicTensor bc6 = (BasicTensor)conn.run("tmp_short_1=take([1h,0h,00h,32767h,-32767h],5);\n tmp_short_2=take([tmp_short_1],2);\n tmp_short_2.setColumnarTuple!();\n tmp_short_3=take([tmp_short_2],3);\n  tmp_short_4=take([tmp_short_3],2);\n tmp_short_5=take([tmp_short_4],3);\n tmp_short_6=take([tmp_short_5],2);\n tr_short_6=tensor(tmp_short_6);\n tr_short_6;");
        Assert.assertEquals("tensor<shortbc6.getString());
        BasicTensor bc7 = (BasicTensor)conn.run("tmp_short_1=take([1h,0h,00h,32767h,-32767h],5);\n tmp_short_2=take([tmp_short_1],2);\n tmp_short_2.setColumnarTuple!();\n tmp_short_3=take([tmp_short_2],3);\n  tmp_short_4=take([tmp_short_3],2);\n tmp_short_5=take([tmp_short_4],2);\n tmp_short_6=take([tmp_short_5],2);\n tmp_short_7=take([tmp_short_6],2);\n tr_short_7=tensor(tmp_short_7);\n tr_short_7;");
        Assert.assertEquals("tensor<shortbc7.getString());
        BasicTensor bc8 = (BasicTensor)conn.run("tmp_short_1=take([1h,0h,00h,32767h,-32767h],5);\n tmp_short_2=take([tmp_short_1],2);\n tmp_short_2.setColumnarTuple!();\n tmp_short_3=take([tmp_short_2],3);\n  tmp_short_4=take([tmp_short_3],2);\n tmp_short_5=take([tmp_short_4],3);\n tmp_short_6=take([tmp_short_5],2);\n tmp_short_7=take([tmp_short_6],3);\n tmp_short_8=take([tmp_short_7],2);\n tr_short_8=tensor(tmp_short_8);\n tr_short_8;");
        Assert.assertEquals("tensor<short[2][3][2][3][2][3][2][5]>([[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]],[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]],[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]],[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]],[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]],[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]],[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]],[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]],[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]],[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]],[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]],[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]],[[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]],[[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]],[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]])", bc8.getString());
        BasicTensor bc9 = (BasicTensor)conn.run("tmp_short_1=take([1h,0h,00h,32767h,-32767h],100);\n tmp_short_2=take([tmp_short_1],1);\n tmp_short_2.setColumnarTuple!();\n tmp_short_3=take([tmp_short_2],1);\n  tmp_short_4=take([tmp_short_3],1);\n tmp_short_5=take([tmp_short_4],1);\n tmp_short_6=take([tmp_short_5],1);\n tmp_short_7=take([tmp_short_6],1);\n tmp_short_8=take([tmp_short_7],1);\n tmp_short_9=take([tmp_short_8],1);\n tr_short_9=tensor(tmp_short_9);\n tr_short_9;");
        Assert.assertEquals("tensor<short[1][1][1][1][1][1][1][1][100]>([[[[[[[[[1,0,,32767,-32767,1,0,,32767,-32767,1...]]]]]]]]])", bc9.getString());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_short_1=take([1h,0h,00h,32767h,-32767h],5);\n tmp_short_2=take([tmp_short_1],2);\n tmp_short_2.setColumnarTuple!();\n tmp_short_3=take([tmp_short_2],1);\n  tmp_short_4=take([tmp_short_3],1);\n tmp_short_5=take([tmp_short_4],1);\n tmp_short_6=take([tmp_short_5],1);\n tmp_short_7=take([tmp_short_6],1);\n tmp_short_8=take([tmp_short_7],1);\n tmp_short_9=take([tmp_short_8],1);\n tmp_short_10=take([tmp_short_9],20);\n tr_short_10=tensor(tmp_short_10);\n tr_short_10;");
        Assert.assertEquals("tensor<short[20][1][1][1][1][1][1][1][2][5]>([[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]],[[[[[[[[[1,0,,32767,-32767],[1,0,,32767,-32767]]]]]]]]]])", bc10.getString());
    }

    @Test
    public void test_BasicTensor_getString_INT() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(array(INT))");
        Assert.assertEquals("tensor<int[0]>([])", bc.getString());

        BasicTensor bc1 = (BasicTensor)conn.run("tensor(take([1i,0i,00i,217483647i,-217483647i],12))");
        Assert.assertEquals("tensor<int[12]>([1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...])", bc1.getString());
        BasicTensor bc2 = (BasicTensor)conn.run("tensor(take([take([1i,0i,00i,217483647i,-217483647i],10)],2).setColumnarTuple!())");
        //tmp_int_1=rand([true,false,00b],10); tmp_int_2=take([tmp_int_1],2); tmp_int_2.setColumnarTuple!(); tr_int_2=tensor(tmp_int_2)
        Assert.assertEquals("tensor<int[2][10]>([[1,0,,217483647,-217483647,1,0,,217483647,-217483647],[1,0,,217483647,-217483647,1,0,,217483647,-217483647]])", bc2.getString());

        BasicTensor bc3 = (BasicTensor)conn.run("tmp_int_1=take([1i,0i,00i,217483647i,-217483647i],12);\n tmp_int_2=take([tmp_int_1],2);\n tmp_int_2.setColumnarTuple!();\n tmp_int_3=take([tmp_int_2],3);\n tr_int_3=tensor(tmp_int_3);\n tr_int_3;");
        Assert.assertEquals("tensor<int[3][2][12]>([[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...],[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]],[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...],[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]],[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...],[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]]])", bc3.getString());
        BasicTensor bc4 = (BasicTensor)conn.run("tmp_int_1=take([1i,0i,00i,217483647i,-217483647i],12);\n tmp_int_2=take([tmp_int_1],2);\n tmp_int_2.setColumnarTuple!();\n tmp_int_3=take([tmp_int_2],3);\n  tmp_int_4=take([tmp_int_3],2);\n tr_int_4=tensor(tmp_int_4);\n tr_int_4;");
        Assert.assertEquals("tensor<int[2][3][2][12]>([[[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...],[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]],[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...],[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]],[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...],[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]]],[[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...],[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]],[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...],[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]],[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...],[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]]]])", bc4.getString());
        BasicTensor bc5 = (BasicTensor)conn.run("tmp_int_1=take([1i,0i,00i,217483647i,-217483647i],5);\n tmp_int_2=take([tmp_int_1],2);\n tmp_int_2.setColumnarTuple!();\n tmp_int_3=take([tmp_int_2],3);\n  tmp_int_4=take([tmp_int_3],4);\n tmp_int_5=take([tmp_int_4],2);\n tr_int_5=tensor(tmp_int_5);\n tr_int_5;");
        Assert.assertEquals("tensor<int[2][4][3][2][5]>([[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]])", bc5.getString());
        BasicTensor bc6 = (BasicTensor)conn.run("tmp_int_1=take([1i,0i,00i,217483647i,-217483647i],5);\n tmp_int_2=take([tmp_int_1],2);\n tmp_int_2.setColumnarTuple!();\n tmp_int_3=take([tmp_int_2],3);\n  tmp_int_4=take([tmp_int_3],2);\n tmp_int_5=take([tmp_int_4],3);\n tmp_int_6=take([tmp_int_5],2);\n tr_int_6=tensor(tmp_int_6);\n tr_int_6;");
        Assert.assertEquals("tensor<int[2][3][2][3][2][5]>([[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]],[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]])", bc6.getString());
        BasicTensor bc7 = (BasicTensor)conn.run("tmp_int_1=take([1i,0i,00i,217483647i,-217483647i],5);\n tmp_int_2=take([tmp_int_1],2);\n tmp_int_2.setColumnarTuple!();\n tmp_int_3=take([tmp_int_2],3);\n  tmp_int_4=take([tmp_int_3],2);\n tmp_int_5=take([tmp_int_4],2);\n tmp_int_6=take([tmp_int_5],2);\n tmp_int_7=take([tmp_int_6],2);\n tr_int_7=tensor(tmp_int_7);\n tr_int_7;");
        Assert.assertEquals("tensor<int[2][2][2][2][3][2][5]>([[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]],[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]],[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]],[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]])", bc7.getString());
        BasicTensor bc8 = (BasicTensor)conn.run("tmp_int_1=take([1i,0i,00i,217483647i,-217483647i],5);\n tmp_int_2=take([tmp_int_1],2);\n tmp_int_2.setColumnarTuple!();\n tmp_int_3=take([tmp_int_2],3);\n  tmp_int_4=take([tmp_int_3],2);\n tmp_int_5=take([tmp_int_4],3);\n tmp_int_6=take([tmp_int_5],2);\n tmp_int_7=take([tmp_int_6],3);\n tmp_int_8=take([tmp_int_7],2);\n tr_int_8=tensor(tmp_int_8);\n tr_int_8;");
        Assert.assertEquals("tensor<int[2][3][2][3][2][3][2][5]>([[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]],[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]],[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]],[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]],[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]],[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]],[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]],[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]],[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]],[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]],[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]],[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]],[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]],[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]],[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]])", bc8.getString());
        BasicTensor bc9 = (BasicTensor)conn.run("tmp_int_1=take([1i,0i,00i,217483647i,-217483647i],100);\n tmp_int_2=take([tmp_int_1],1);\n tmp_int_2.setColumnarTuple!();\n tmp_int_3=take([tmp_int_2],1);\n  tmp_int_4=take([tmp_int_3],1);\n tmp_int_5=take([tmp_int_4],1);\n tmp_int_6=take([tmp_int_5],1);\n tmp_int_7=take([tmp_int_6],1);\n tmp_int_8=take([tmp_int_7],1);\n tmp_int_9=take([tmp_int_8],1);\n tr_int_9=tensor(tmp_int_9);\n tr_int_9;");
        Assert.assertEquals("tensor<int[1][1][1][1][1][1][1][1][100]>([[[[[[[[[1,0,,217483647,-217483647,1,0,,217483647,-217483647,1...]]]]]]]]])", bc9.getString());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_int_1=take([1i,0i,00i,217483647i,-217483647i],5);\n tmp_int_2=take([tmp_int_1],2);\n tmp_int_2.setColumnarTuple!();\n tmp_int_3=take([tmp_int_2],1);\n  tmp_int_4=take([tmp_int_3],1);\n tmp_int_5=take([tmp_int_4],1);\n tmp_int_6=take([tmp_int_5],1);\n tmp_int_7=take([tmp_int_6],1);\n tmp_int_8=take([tmp_int_7],1);\n tmp_int_9=take([tmp_int_8],1);\n tmp_int_10=take([tmp_int_9],20);\n tr_int_10=tensor(tmp_int_10);\n tr_int_10;");
        Assert.assertEquals("tensor<int[20][1][1][1][1][1][1][1][2][5]>([[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]],[[[[[[[[[1,0,,217483647,-217483647],[1,0,,217483647,-217483647]]]]]]]]]])", bc10.getString());
    }

    @Test
    public void test_BasicTensor_getString_LONG() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(array(LONG))");
        Assert.assertEquals("tensor<long[0]>([])", bc.getString());

        BasicTensor bc1 = (BasicTensor)conn.run("tensor(take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],12))");
        Assert.assertEquals("tensor<long[12]>([1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...])", bc1.getString());
        BasicTensor bc2 = (BasicTensor)conn.run("tensor(take([take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],10)],2).setColumnarTuple!())");
        //tmp_long_1=rand([true,false,00b],10); tmp_long_2=take([tmp_long_1],2); tmp_long_2.setColumnarTuple!(); tr_long_2=tensor(tmp_long_2)
        Assert.assertEquals("tensor<long[2][10]>([[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807]])", bc2.getString());

        BasicTensor bc3 = (BasicTensor)conn.run("tmp_long_1=take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],12);\n tmp_long_2=take([tmp_long_1],2);\n tmp_long_2.setColumnarTuple!();\n tmp_long_3=take([tmp_long_2],3);\n tr_long_3=tensor(tmp_long_3);\n tr_long_3;");
        Assert.assertEquals("tensor<long[3][2][12]>([[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]],[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]],[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]]])", bc3.getString());
        BasicTensor bc4 = (BasicTensor)conn.run("tmp_long_1=take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],12);\n tmp_long_2=take([tmp_long_1],2);\n tmp_long_2.setColumnarTuple!();\n tmp_long_3=take([tmp_long_2],3);\n  tmp_long_4=take([tmp_long_3],2);\n tr_long_4=tensor(tmp_long_4);\n tr_long_4;");
        Assert.assertEquals("tensor<long[2][3][2][12]>([[[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]],[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]],[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]]],[[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]],[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]],[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...],[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]]]])", bc4.getString());
        BasicTensor bc5 = (BasicTensor)conn.run("tmp_long_1=take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],5);\n tmp_long_2=take([tmp_long_1],2);\n tmp_long_2.setColumnarTuple!();\n tmp_long_3=take([tmp_long_2],3);\n  tmp_long_4=take([tmp_long_3],4);\n tmp_long_5=take([tmp_long_4],2);\n tr_long_5=tensor(tmp_long_5);\n tr_long_5;");
        Assert.assertEquals("tensor<long[2][4][3][2][5]>([[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]])", bc5.getString());
        BasicTensor bc6 = (BasicTensor)conn.run("tmp_long_1=take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],5);\n tmp_long_2=take([tmp_long_1],2);\n tmp_long_2.setColumnarTuple!();\n tmp_long_3=take([tmp_long_2],3);\n  tmp_long_4=take([tmp_long_3],2);\n tmp_long_5=take([tmp_long_4],3);\n tmp_long_6=take([tmp_long_5],2);\n tr_long_6=tensor(tmp_long_6);\n tr_long_6;");
        Assert.assertEquals("tensor<long[2][3][2][3][2][5]>([[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]],[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]])", bc6.getString());
        BasicTensor bc7 = (BasicTensor)conn.run("tmp_long_1=take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],5);\n tmp_long_2=take([tmp_long_1],2);\n tmp_long_2.setColumnarTuple!();\n tmp_long_3=take([tmp_long_2],3);\n  tmp_long_4=take([tmp_long_3],2);\n tmp_long_5=take([tmp_long_4],2);\n tmp_long_6=take([tmp_long_5],2);\n tmp_long_7=take([tmp_long_6],2);\n tr_long_7=tensor(tmp_long_7);\n tr_long_7;");
        Assert.assertEquals("tensor<long[2][2][2][2][3][2][5]>([[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]],[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]],[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]],[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]])", bc7.getString());
        BasicTensor bc8 = (BasicTensor)conn.run("tmp_long_1=take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],5);\n tmp_long_2=take([tmp_long_1],2);\n tmp_long_2.setColumnarTuple!();\n tmp_long_3=take([tmp_long_2],3);\n  tmp_long_4=take([tmp_long_3],2);\n tmp_long_5=take([tmp_long_4],3);\n tmp_long_6=take([tmp_long_5],2);\n tmp_long_7=take([tmp_long_6],3);\n tmp_long_8=take([tmp_long_7],2);\n tr_long_8=tensor(tmp_long_8);\n tr_long_8;");
        Assert.assertEquals("tensor<long[2][3][2][3][2][3][2][5]>([[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]],[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]],[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]],[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]],[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]],[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]],[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]],[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]],[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]],[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]],[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]],[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]],[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]],[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]],[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]])", bc8.getString());
        BasicTensor bc9 = (BasicTensor)conn.run("tmp_long_1=take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],100);\n tmp_long_2=take([tmp_long_1],1);\n tmp_long_2.setColumnarTuple!();\n tmp_long_3=take([tmp_long_2],1);\n  tmp_long_4=take([tmp_long_3],1);\n tmp_long_5=take([tmp_long_4],1);\n tmp_long_6=take([tmp_long_5],1);\n tmp_long_7=take([tmp_long_6],1);\n tmp_long_8=take([tmp_long_7],1);\n tmp_long_9=take([tmp_long_8],1);\n tr_long_9=tensor(tmp_long_9);\n tr_long_9;");
        Assert.assertEquals("tensor<long[1][1][1][1][1][1][1][1][100]>([[[[[[[[[1,0,,9223372036854775807,-9223372036854775807,1,0,,9223372036854775807,-9223372036854775807,1...]]]]]]]]])", bc9.getString());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_long_1=take([1l,0l,00l,9223372036854775807l,-9223372036854775807l],5);\n tmp_long_2=take([tmp_long_1],2);\n tmp_long_2.setColumnarTuple!();\n tmp_long_3=take([tmp_long_2],1);\n  tmp_long_4=take([tmp_long_3],1);\n tmp_long_5=take([tmp_long_4],1);\n tmp_long_6=take([tmp_long_5],1);\n tmp_long_7=take([tmp_long_6],1);\n tmp_long_8=take([tmp_long_7],1);\n tmp_long_9=take([tmp_long_8],1);\n tmp_long_10=take([tmp_long_9],20);\n tr_long_10=tensor(tmp_long_10);\n tr_long_10;");
        Assert.assertEquals("tensor<long[20][1][1][1][1][1][1][1][2][5]>([[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]],[[[[[[[[[1,0,,9223372036854775807,-9223372036854775807],[1,0,,9223372036854775807,-9223372036854775807]]]]]]]]]])", bc10.getString());
    }
    
    @Test
    public void test_BasicTensor_getString_FLOAT() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(array(FLOAT))");
        Assert.assertEquals("tensor<float[0]>([])", bc.getString());

        BasicTensor bc1 = (BasicTensor)conn.run("tensor(take([0.0f,float('nan'),float('inf'),00f],12))");
        Assert.assertEquals("tensor<float[12]>([0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...])", bc1.getString());
        BasicTensor bc2 = (BasicTensor)conn.run("tensor(take([take([0.0f,float('nan'),float('inf'),00f],10)],2).setColumnarTuple!())");
        //tmp_float_1=rand([true,false,00b],10); tmp_float_2=take([tmp_float_1],2); tmp_float_2.setColumnarTuple!(); tr_float_2=tensor(tmp_float_2)
        Assert.assertEquals("tensor<float[2][10]>([[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN]])", bc2.getString());

        BasicTensor bc3 = (BasicTensor)conn.run("tmp_float_1=take([0.0f,float('nan'),float('inf'),00f],12);\n tmp_float_2=take([tmp_float_1],2);\n tmp_float_2.setColumnarTuple!();\n tmp_float_3=take([tmp_float_2],3);\n tr_float_3=tensor(tmp_float_3);\n tr_float_3;");
        Assert.assertEquals("tensor<float[3][2][12]>([[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]],[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]],[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]]])", bc3.getString());
        BasicTensor bc4 = (BasicTensor)conn.run("tmp_float_1=take([0.0f,float('nan'),float('inf'),00f],12);\n tmp_float_2=take([tmp_float_1],2);\n tmp_float_2.setColumnarTuple!();\n tmp_float_3=take([tmp_float_2],3);\n  tmp_float_4=take([tmp_float_3],2);\n tr_float_4=tensor(tmp_float_4);\n tr_float_4;");
        Assert.assertEquals("tensor<float[2][3][2][12]>([[[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]],[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]],[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]]],[[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]],[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]],[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...],[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]]]])", bc4.getString());
        BasicTensor bc5 = (BasicTensor)conn.run("tmp_float_1=take([0.0f,float('nan'),float('inf'),00f],5);\n tmp_float_2=take([tmp_float_1],2);\n tmp_float_2.setColumnarTuple!();\n tmp_float_3=take([tmp_float_2],3);\n  tmp_float_4=take([tmp_float_3],4);\n tmp_float_5=take([tmp_float_4],2);\n tr_float_5=tensor(tmp_float_5);\n tr_float_5;");
        Assert.assertEquals("tensor<float[2][4][3][2][5]>([[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]])", bc5.getString());
        BasicTensor bc6 = (BasicTensor)conn.run("tmp_float_1=take([0.0f,float('nan'),float('inf'),00f],5);\n tmp_float_2=take([tmp_float_1],2);\n tmp_float_2.setColumnarTuple!();\n tmp_float_3=take([tmp_float_2],3);\n  tmp_float_4=take([tmp_float_3],2);\n tmp_float_5=take([tmp_float_4],3);\n tmp_float_6=take([tmp_float_5],2);\n tr_float_6=tensor(tmp_float_6);\n tr_float_6;");
        Assert.assertEquals("tensor<float[2][3][2][3][2][5]>([[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]],[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]])", bc6.getString());
        BasicTensor bc7 = (BasicTensor)conn.run("tmp_float_1=take([0.0f,float('nan'),float('inf'),00f],5);\n tmp_float_2=take([tmp_float_1],2);\n tmp_float_2.setColumnarTuple!();\n tmp_float_3=take([tmp_float_2],3);\n  tmp_float_4=take([tmp_float_3],2);\n tmp_float_5=take([tmp_float_4],2);\n tmp_float_6=take([tmp_float_5],2);\n tmp_float_7=take([tmp_float_6],2);\n tr_float_7=tensor(tmp_float_7);\n tr_float_7;");
        Assert.assertEquals("tensor<float[2][2][2][2][3][2][5]>([[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]],[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]],[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]],[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]])", bc7.getString());
        BasicTensor bc8 = (BasicTensor)conn.run("tmp_float_1=take([0.0f,float('nan'),float('inf'),00f],5);\n tmp_float_2=take([tmp_float_1],2);\n tmp_float_2.setColumnarTuple!();\n tmp_float_3=take([tmp_float_2],3);\n  tmp_float_4=take([tmp_float_3],2);\n tmp_float_5=take([tmp_float_4],3);\n tmp_float_6=take([tmp_float_5],2);\n tmp_float_7=take([tmp_float_6],3);\n tmp_float_8=take([tmp_float_7],2);\n tr_float_8=tensor(tmp_float_8);\n tr_float_8;");
        Assert.assertEquals("tensor<float[2][3][2][3][2][3][2][5]>([[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]],[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]],[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]],[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]],[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]],[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]],[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]],[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]],[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]],[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]],[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]],[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]],[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]],[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]],[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]])", bc8.getString());
        BasicTensor bc9 = (BasicTensor)conn.run("tmp_float_1=take([0.0f,float('nan'),float('inf'),00f],100);\n tmp_float_2=take([tmp_float_1],1);\n tmp_float_2.setColumnarTuple!();\n tmp_float_3=take([tmp_float_2],1);\n  tmp_float_4=take([tmp_float_3],1);\n tmp_float_5=take([tmp_float_4],1);\n tmp_float_6=take([tmp_float_5],1);\n tmp_float_7=take([tmp_float_6],1);\n tmp_float_8=take([tmp_float_7],1);\n tmp_float_9=take([tmp_float_8],1);\n tr_float_9=tensor(tmp_float_9);\n tr_float_9;");
        Assert.assertEquals("tensor<float[1][1][1][1][1][1][1][1][100]>([[[[[[[[[0,NaN,Infinity,,0,NaN,Infinity,,0,NaN,Infinity...]]]]]]]]])", bc9.getString());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_float_1=take([0.0f,float('nan'),float('inf'),00f],5);\n tmp_float_2=take([tmp_float_1],2);\n tmp_float_2.setColumnarTuple!();\n tmp_float_3=take([tmp_float_2],1);\n  tmp_float_4=take([tmp_float_3],1);\n tmp_float_5=take([tmp_float_4],1);\n tmp_float_6=take([tmp_float_5],1);\n tmp_float_7=take([tmp_float_6],1);\n tmp_float_8=take([tmp_float_7],1);\n tmp_float_9=take([tmp_float_8],1);\n tmp_float_10=take([tmp_float_9],20);\n tr_float_10=tensor(tmp_float_10);\n tr_float_10;");
        Assert.assertEquals("tensor<float[20][1][1][1][1][1][1][1][2][5]>([[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]],[[[[[[[[[0,NaN,Infinity,,0],[0,NaN,Infinity,,0]]]]]]]]]])", bc10.getString());
    }

    @Test
    public void test_BasicTensor_getString_DOUBLE() throws Exception {
        DBConnection conn = new DBConnection();
        conn.connect(HOST,PORT,"admin","123456");
        BasicTensor bc = (BasicTensor)conn.run("tensor(array(DOUBLE))");
        Assert.assertEquals("tensor<double[0]>([])", bc.getString());

        BasicTensor bc1 = (BasicTensor)conn.run("tensor(take([0.0F,pi,00f,1.234,-1.234],12))");
        Assert.assertEquals("tensor<double[12]>([0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...])", bc1.getString());
        BasicTensor bc2 = (BasicTensor)conn.run("tensor(take([take([0.0F,pi,00f,1.234,-1.234],10)],2).setColumnarTuple!())");
        //tmp_double_1=rand([true,false,00b],10); tmp_double_2=take([tmp_double_1],2); tmp_double_2.setColumnarTuple!(); tr_double_2=tensor(tmp_double_2)
        Assert.assertEquals("tensor<double[2][10]>([[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234]])", bc2.getString());

        BasicTensor bc3 = (BasicTensor)conn.run("tmp_double_1=take([0.0F,pi,00f,1.234,-1.234],12);\n tmp_double_2=take([tmp_double_1],2);\n tmp_double_2.setColumnarTuple!();\n tmp_double_3=take([tmp_double_2],3);\n tr_double_3=tensor(tmp_double_3);\n tr_double_3;");
        Assert.assertEquals("tensor<double[3][2][12]>([[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]],[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]],[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]]])", bc3.getString());
        BasicTensor bc4 = (BasicTensor)conn.run("tmp_double_1=take([0.0F,pi,00f,1.234,-1.234],12);\n tmp_double_2=take([tmp_double_1],2);\n tmp_double_2.setColumnarTuple!();\n tmp_double_3=take([tmp_double_2],3);\n  tmp_double_4=take([tmp_double_3],2);\n tr_double_4=tensor(tmp_double_4);\n tr_double_4;");
        Assert.assertEquals("tensor<double[2][3][2][12]>([[[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]],[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]],[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]]],[[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]],[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]],[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...],[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]]]])", bc4.getString());
        BasicTensor bc5 = (BasicTensor)conn.run("tmp_double_1=take([0.0F,pi,00f,1.234,-1.234],5);\n tmp_double_2=take([tmp_double_1],2);\n tmp_double_2.setColumnarTuple!();\n tmp_double_3=take([tmp_double_2],3);\n  tmp_double_4=take([tmp_double_3],4);\n tmp_double_5=take([tmp_double_4],2);\n tr_double_5=tensor(tmp_double_5);\n tr_double_5;");
        Assert.assertEquals("tensor<double[2][4][3][2][5]>([[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]])", bc5.getString());
        BasicTensor bc6 = (BasicTensor)conn.run("tmp_double_1=take([0.0F,pi,00f,1.234,-1.234],5);\n tmp_double_2=take([tmp_double_1],2);\n tmp_double_2.setColumnarTuple!();\n tmp_double_3=take([tmp_double_2],3);\n  tmp_double_4=take([tmp_double_3],2);\n tmp_double_5=take([tmp_double_4],3);\n tmp_double_6=take([tmp_double_5],2);\n tr_double_6=tensor(tmp_double_6);\n tr_double_6;");
        Assert.assertEquals("tensor<double[2][3][2][3][2][5]>([[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]],[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]])", bc6.getString());
        BasicTensor bc7 = (BasicTensor)conn.run("tmp_double_1=take([0.0F,pi,00f,1.234,-1.234],5);\n tmp_double_2=take([tmp_double_1],2);\n tmp_double_2.setColumnarTuple!();\n tmp_double_3=take([tmp_double_2],3);\n  tmp_double_4=take([tmp_double_3],2);\n tmp_double_5=take([tmp_double_4],2);\n tmp_double_6=take([tmp_double_5],2);\n tmp_double_7=take([tmp_double_6],2);\n tr_double_7=tensor(tmp_double_7);\n tr_double_7;");
        Assert.assertEquals("tensor<double[2][2][2][2][3][2][5]>([[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]],[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]],[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]],[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]])", bc7.getString());
        BasicTensor bc8 = (BasicTensor)conn.run("tmp_double_1=take([0.0F,pi,00f,1.234,-1.234],5);\n tmp_double_2=take([tmp_double_1],2);\n tmp_double_2.setColumnarTuple!();\n tmp_double_3=take([tmp_double_2],3);\n  tmp_double_4=take([tmp_double_3],2);\n tmp_double_5=take([tmp_double_4],3);\n tmp_double_6=take([tmp_double_5],2);\n tmp_double_7=take([tmp_double_6],3);\n tmp_double_8=take([tmp_double_7],2);\n tr_double_8=tensor(tmp_double_8);\n tr_double_8;");
        Assert.assertEquals("tensor<double[2][3][2][3][2][3][2][5]>([[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]],[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]],[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]],[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]],[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]],[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]],[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]],[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]],[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]],[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]],[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]],[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]],[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]],[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]],[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]])", bc8.getString());
        BasicTensor bc9 = (BasicTensor)conn.run("tmp_double_1=take([0.0F,pi,00f,1.234,-1.234],100);\n tmp_double_2=take([tmp_double_1],1);\n tmp_double_2.setColumnarTuple!();\n tmp_double_3=take([tmp_double_2],1);\n  tmp_double_4=take([tmp_double_3],1);\n tmp_double_5=take([tmp_double_4],1);\n tmp_double_6=take([tmp_double_5],1);\n tmp_double_7=take([tmp_double_6],1);\n tmp_double_8=take([tmp_double_7],1);\n tmp_double_9=take([tmp_double_8],1);\n tr_double_9=tensor(tmp_double_9);\n tr_double_9;");
        Assert.assertEquals("tensor<double[1][1][1][1][1][1][1][1][100]>([[[[[[[[[0,3.14159265,,1.234,-1.234,0,3.14159265,,1.234,-1.234,0...]]]]]]]]])", bc9.getString());
        BasicTensor bc10 = (BasicTensor)conn.run("tmp_double_1=take([0.0F,pi,00f,1.234,-1.234],5);\n tmp_double_2=take([tmp_double_1],2);\n tmp_double_2.setColumnarTuple!();\n tmp_double_3=take([tmp_double_2],1);\n  tmp_double_4=take([tmp_double_3],1);\n tmp_double_5=take([tmp_double_4],1);\n tmp_double_6=take([tmp_double_5],1);\n tmp_double_7=take([tmp_double_6],1);\n tmp_double_8=take([tmp_double_7],1);\n tmp_double_9=take([tmp_double_8],1);\n tmp_double_10=take([tmp_double_9],20);\n tr_double_10=tensor(tmp_double_10);\n tr_double_10;");
        Assert.assertEquals("tensor<double[20][1][1][1][1][1][1][1][2][5]>([[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]],[[[[[[[[[0,3.14159265,,1.234,-1.234],[0,3.14159265,,1.234,-1.234]]]]]]]]]])", bc10.getString());
    }
}
